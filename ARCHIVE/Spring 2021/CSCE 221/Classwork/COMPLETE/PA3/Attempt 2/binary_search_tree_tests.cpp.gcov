        -:    0:Source:binary_search_tree_tests.cpp
        -:    0:Graph:binary_search_tree_tests.gcno
        -:    0:Data:binary_search_tree_tests.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <iostream>
        -:    2:#include "binary_search_tree.h"
        -:    3:
        -:    4:using std::cout, std::endl;
        -:    5:
        1:    6:int main() {
        -:    7:    // TODO(student): write tests
        -:    8:
        1:    9:      size_t num = 0;
        -:   10:    
        1:   11:    TestHeader("CONSTRUCTION",num);
        2:   12:    BinarySearchTree<int> a;
        1:   13:    a.insert(7);
        1:   14:    a.insert(3);
        1:   15:    a.insert(2);
        1:   16:    a.insert(1);
        1:   17:    a.insert(9);
        1:   18:    a.insert(8);
        1:   19:    a.insert(5);
        1:   20:    a.insert(4);
        1:   21:    a.insert(11);
        1:   22:    a.insert(10);
        1:   23:    a.insert(6);
        1:   24:    a.insert(12);
        -:   25:
        1:   26:    a.print_tree(cout);
        1:   27:     ss();
        -:   28:
        1:   29:    a.remove(7);
        1:   30:    a.remove(8);
        1:   31:    a.remove(9);
        1:   32:    a.remove(10);
        1:   33:    a.remove(11);
        1:   34:    a.remove(12);
        -:   35:
        1:   36:    a.print_tree(cout);
        -:   37:
        -:   38:    
       11:   39:    for(int i = 0; i < 10; ++i) {
       10:   40:        a.insert(i);
       10:   41:        a.print_tree(cout);
       10:   42:     ss();
        -:   43:    }
        -:   44:
        1:   45:    a.remove(7);
        1:   46:    a.print_tree(cout);
        1:   47:     ss();
        -:   48:
        1:   49:    a = a;
        1:   50:    a.remove(2);
        1:   51:    a.print_tree(cout);
        1:   52:     ss();
        -:   53:
        1:   54:    a.remove(1);
        1:   55:    a.print_tree(cout);
        1:   56:     ss();
        -:   57:
        1:   58:    a.remove(6);
        1:   59:    a.print_tree(cout);
        1:   60:     ss();
        -:   61:
        1:   62:    a.remove(8);
        1:   63:    a.print_tree(cout);
        1:   64:     ss();
        -:   65:    
        2:   66:    BinarySearchTree<int> k;
        1:   67:    k.insert(1);
        1:   68:    k.insert(3);
        1:   69:    k.insert(2);
        1:   70:    k.print_tree(cout);
        -:   71:
        2:   72:    BinarySearchTree<int> f;
        1:   73:    f.insert(3);
        1:   74:    f.insert(2);
        1:   75:    f.insert(1);
        1:   76:    f.print_tree(cout);
        -:   77:
        2:   78:    BinarySearchTree<int> q;
        1:   79:    q.insert(3);
        1:   80:    q.insert(1);
        1:   81:    q.insert(2);
        1:   82:    q.print_tree(cout);
        1:   83:     ss(); 
        -:   84:    
        -:   85:    
        1:   86:    a.insert(10);
        1:   87:    a.insert(17);
        1:   88:    a.insert(5);
        1:   89:     ss();
        1:   90:     nl();
        -:   91:
        1:   92:    a.print_tree(cout);
        -:   93:
        1:   94:     ss();
        -:   95:    
        1:   96:    int j = 1;
       11:   97:    for(int i = 0; i < 10; ++i) {
       10:   98:        j = (j*i + 3) % 23;
       10:   99:        cout << "inserting : " << j << endl;
       10:  100:        a.insert(j);
       10:  101:        a.print_tree(cout);
        -:  102:         
        -:  103:        
       10:  104:         ss();
        -:  105:    }
        1:  106:    cout << "{10, 17, 5 | 3, 6, 15, 2, 11, 12, /6, 22, 19, 4}" << endl;
        -:  107:    //a.print_tree(cout);
        1:  108:    nl();
        -:  109:    
        -:  110:    
        -:  111:    
        -:  112:    
        1:  113:    cout << "Max: " << a.find_max() << endl;
        1:  114:    cout << "Min: " << a.find_min() << endl;
        1:  115:    cout << "Contains 22: " << a.contains(22) << endl;
        1:  116:    cout << "Contains 34564: " << a.contains(34564) << endl;
        2:  117:    BinarySearchTree<int> b(a);
        1:  118:    a.make_empty();
        1:  119:    a.print_tree(cout);
        1:  120:     ss();
        1:  121:    try{a.find_max();}
        1:  122:    catch(std::invalid_argument& e){cout << e.what()<< endl;}
        1:  123:    try{a.find_min();}
        1:  124:    catch(std::invalid_argument& e){cout << e.what()<< endl;}
        -:  125:    
        -:  126:    
        -:  127: 
        1:  128:     ss();
        1:  129:    b.print_tree(cout);
        1:  130:     ss();
        2:  131:    BinarySearchTree<int> c;
        2:  132:    BinarySearchTree<int> d;
        -:  133:    ;
        1:  134:    a=b;//initialize new tree
        -:  135:    ;
        1:  136:    b=c;//erase full tree
        -:  137:    ;
        1:  138:    d=c;//copy empty tree to empty tree
        -:  139:    /////////////////////////////////////////////////////////
        -:  140:
        1:  141:    a.print_tree(cout);
        -:  142:     
        1:  143:     ss();
        1:  144:    b.print_tree(cout);
        1:  145:     ss();
        1:  146:    c.print_tree(cout);
        1:  147:     ss();
        1:  148:    d.print_tree(cout);
        -:  149:
        1:  150:    TestFooter();
        1:  151:    TestHeader("DESTRUCTION",num);
        -:  152:    
        1:  153:    a.print_tree(cout);
        1:  154:    nl();
        1:  155:     ss();
        1:  156:    cout << "{10, 17, 5 | 3, 6, 15, 2, 11, 12, /6, 22, 19, 4}" << endl;
        1:  157:    j = 1;
       11:  158:    for(int i = 0; i < 10; ++i) {
       10:  159:        j = (j*i + 3) % 23;
       10:  160:        cout << "Removing " << j << "..." << endl;
       10:  161:        a.remove(j);
        -:  162:        
       10:  163:        a.print_tree(cout);
        -:  164:         
       10:  165:         ss();
        -:  166:
        -:  167:    }
        1:  168:    a.print_tree(cout);
        1:  169:     ss();
        -:  170:
        1:  171:    a.remove(10);
        1:  172:    a.print_tree(cout);
        -:  173:
        1:  174:     ss();
        -:  175:
        1:  176:    a.remove(5);
        1:  177:    a.print_tree(cout);
        -:  178:
        1:  179:     ss();
        -:  180:
        1:  181:    a.remove(17);
        1:  182:    a.print_tree(cout);
        -:  183:    
        -:  184:    
        1:  185:    j = 1;
       11:  186:    for(int i = 0; i < 10; ++i) {
       10:  187:        j = (j*i + 5) % 13;
       10:  188:        a.insert(j);
        -:  189:    }
        -:  190:
        1:  191:     ss();
        -:  192:
        1:  193:    a.print_tree(cout);
        -:  194:
        1:  195:     ss();
        -:  196:
        1:  197:    a.remove(10);
        1:  198:    a.print_tree(cout);
        -:  199:
        1:  200:     ss();
        1:  201:    a.remove(0);
        1:  202:    a.print_tree(cout);
        -:  203:
        1:  204:     ss();
        -:  205:
        1:  206:    a.remove(3);
        1:  207:    a.print_tree(cout);
        -:  208:
        1:  209:     ss();
        -:  210:
        1:  211:    a.remove(12);
        1:  212:    a.print_tree(cout);
        -:  213:
        1:  214:    a.insert(1);
        -:  215:
        1:  216:     ss();
        -:  217:
        1:  218:    a.remove(2);
        1:  219:    a.print_tree(cout);
        1:  220:    TestFooter();
        -:  221:
        1:  222:    TestHeader("LARGE DATA CASE", num);
        2:  223:    BinarySearchTree<int> r;
        1:  224:    r.insert(4);
        1:  225:    r.insert(5);
        1:  226:    r.insert(6);
        -:  227:     
        1:  228:    r.print_tree(cout);
        -:  229:
        1:  230:     ss();
        1:  231:    r.insert(3);
        1:  232:    r.print_tree(cout);
        1:  233:     ss();
        -:  234:    
        1:  235:    r.insert(2);
        1:  236:    r.print_tree(cout);
        1:  237:     ss();
        -:  238:    
        1:  239:    r.insert(1);
        1:  240:    r.print_tree(cout);
        -:  241:
       21:  242:    for(int i = 30; i < 50; i+=1) {
       20:  243:        cout << "Inserting " << i << "..." << endl;
       20:  244:        r.insert(i);
       20:  245:         ss();
        -:  246:    }
        -:  247:    
        1:  248:    r.print_tree(cout);
       21:  249:    for(int i = 10; i < 30; i+=1) {
       20:  250:        cout << "Inserting " << i << "..." << endl;
       20:  251:        r.insert(i);
       20:  252:         ss();
        -:  253:    }
        -:  254:    
        1:  255:    r.print_tree(cout);
        1:  256:    j = 1;
      101:  257:    for(int i = 0; i < 100; i+=1) {
      100:  258:        j = (i * j + 97) % 1000 ;
      100:  259:        cout << "Iteration " << i + 1 << " of 100" << endl;
      100:  260:        cout << "Inserting " << j << "..." << endl;
      100:  261:        k.insert(j);
      100:  262:         ss();
        -:  263:    }
        1:  264:    k.print_tree(cout);
        1:  265:     ss();
        -:  266:    
        1:  267:    a=k;
        -:  268:    
        2:  269:    BinarySearchTree<int> p(a);
        1:  270:    cout << "Max: " << p.find_max() << endl;
        1:  271:    cout << "Min: " << p.find_min() << endl;
        1:  272:    cout << "Contains 485: " << p.contains(485) << endl;
        1:  273:    cout << "Contains 34564: " << p.contains(34564) << endl;
        1:  274:    a.make_empty();
        -:  275:    
        2:  276:    BinarySearchTree<int> t(a);
        1:  277:    t.insert(8);
        1:  278:    a.insert(8);
        -:  279:    
        1:  280:    a.print_tree(cout);
        1:  281:    t.print_tree(cout);
        1:  282:     ss();
        1:  283:    p.print_tree(cout);
        1:  284:     ss();
        -:  285:
        1:  286:    k.print_tree(cout);
        1:  287:     ss();
        -:  288:
        1:  289:    j = 1;
        1:  290:    k.remove(1);
        1:  291:    k.remove(3);
        -:  292:    
        1:  293:    k.remove(2);
        -:  294:    
        1:  295:    k.print_tree();
      101:  296:    for(int i = 0; i < 100; i+=1) {
      100:  297:        j = (i * j + 97) % 1000 ;
      100:  298:        cout << "Iteration " << i + 1 << " of 100" << endl;
      100:  299:        cout << "Removing " << j << "..." << endl;
      100:  300:        k.remove(j);
        -:  301:    }
        1:  302:    k.print_tree(cout);
        -:  303:
        1:  304:    ss();
        -:  305:
        1:  306:    k.print_tree();
        -:  307:    
        1:  308:    TestFooter();
        -:  309:    
        4:  310:}
